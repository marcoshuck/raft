// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteRequesterClient is the client API for VoteRequester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteRequesterClient interface {
	Request(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type voteRequesterClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteRequesterClient(cc grpc.ClientConnInterface) VoteRequesterClient {
	return &voteRequesterClient{cc}
}

func (c *voteRequesterClient) Request(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/api.VoteRequester/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteRequesterServer is the server API for VoteRequester service.
// All implementations must embed UnimplementedVoteRequesterServer
// for forward compatibility
type VoteRequesterServer interface {
	Request(context.Context, *VoteRequest) (*VoteResponse, error)
	mustEmbedUnimplementedVoteRequesterServer()
}

// UnimplementedVoteRequesterServer must be embedded to have forward compatible implementations.
type UnimplementedVoteRequesterServer struct {
}

func (UnimplementedVoteRequesterServer) Request(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedVoteRequesterServer) mustEmbedUnimplementedVoteRequesterServer() {}

// UnsafeVoteRequesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteRequesterServer will
// result in compilation errors.
type UnsafeVoteRequesterServer interface {
	mustEmbedUnimplementedVoteRequesterServer()
}

func RegisterVoteRequesterServer(s grpc.ServiceRegistrar, srv VoteRequesterServer) {
	s.RegisterService(&VoteRequester_ServiceDesc, srv)
}

func _VoteRequester_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteRequesterServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.VoteRequester/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteRequesterServer).Request(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoteRequester_ServiceDesc is the grpc.ServiceDesc for VoteRequester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoteRequester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VoteRequester",
	HandlerType: (*VoteRequesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _VoteRequester_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voting.proto",
}
