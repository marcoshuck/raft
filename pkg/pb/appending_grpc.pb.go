// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntriesAppenderClient is the client API for EntriesAppender service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntriesAppenderClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
}

type entriesAppenderClient struct {
	cc grpc.ClientConnInterface
}

func NewEntriesAppenderClient(cc grpc.ClientConnInterface) EntriesAppenderClient {
	return &entriesAppenderClient{cc}
}

func (c *entriesAppenderClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/api.EntriesAppender/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntriesAppenderServer is the server API for EntriesAppender service.
// All implementations must embed UnimplementedEntriesAppenderServer
// for forward compatibility
type EntriesAppenderServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	mustEmbedUnimplementedEntriesAppenderServer()
}

// UnimplementedEntriesAppenderServer must be embedded to have forward compatible implementations.
type UnimplementedEntriesAppenderServer struct {
}

func (UnimplementedEntriesAppenderServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEntriesAppenderServer) mustEmbedUnimplementedEntriesAppenderServer() {}

// UnsafeEntriesAppenderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntriesAppenderServer will
// result in compilation errors.
type UnsafeEntriesAppenderServer interface {
	mustEmbedUnimplementedEntriesAppenderServer()
}

func RegisterEntriesAppenderServer(s grpc.ServiceRegistrar, srv EntriesAppenderServer) {
	s.RegisterService(&EntriesAppender_ServiceDesc, srv)
}

func _EntriesAppender_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesAppenderServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.EntriesAppender/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesAppenderServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntriesAppender_ServiceDesc is the grpc.ServiceDesc for EntriesAppender service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntriesAppender_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.EntriesAppender",
	HandlerType: (*EntriesAppenderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _EntriesAppender_Append_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appending.proto",
}
